
package proxy;

import java.util.List;
import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.Action;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.ResponseWrapper;


/**
 * This class was generated by the XML-WS Tools.
 * XML-WS Tools 4.0.0
 * Generated source version: 3.0
 * 
 */
@WebService(name = "ReleveService", targetNamespace = "http://ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ReleveService {


    /**
     * 
     * @return
     *     returns java.util.List<proxy.Operation>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listOperations", targetNamespace = "http://ws/", className = "proxy.ListOperations")
    @ResponseWrapper(localName = "listOperationsResponse", targetNamespace = "http://ws/", className = "proxy.ListOperationsResponse")
    @Action(input = "http://ws/ReleveService/listOperationsRequest", output = "http://ws/ReleveService/listOperationsResponse")
    public List<Operation> listOperations();

    /**
     * 
     * @param rib
     * @return
     *     returns proxy.Operation
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getOperations", targetNamespace = "http://ws/", className = "proxy.GetOperations")
    @ResponseWrapper(localName = "getOperationsResponse", targetNamespace = "http://ws/", className = "proxy.GetOperationsResponse")
    @Action(input = "http://ws/ReleveService/getOperationsRequest", output = "http://ws/ReleveService/getOperationsResponse")
    public Operation getOperations(
        @WebParam(name = "rib", targetNamespace = "")
        String rib);

}
